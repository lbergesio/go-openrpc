// Code generated by go-openrpc. DO NOT EDIT.
package gencode

type GoOpenRPCService interface {
	// Retrieves the list of supported versions of this API.
	ApiVersionGet() (*ApiVersionGetResult, error)
	// Gets all the statistics records from the gateway.
	StatsGet(*StatsGetParams) (*StatsGetResult, error)
	// Write async events generated in the gateway to the intercommunication bus so they can be consumed.
	EventsWrite(*EventsWriteParams) (*EventsWriteResult, error)
	// Execute a command in the gateway and retrieve its output.
	CommandSend(*CommandSendParams) (*CommandSendResult, error)
}
type Versions struct {
	Version string `json:"version"`
}
type ApiVersionGetResult struct {
	Versions []string `json:"versions"`
}
type StatsGetParams struct {
	Version string `json:"version"`
}
type StatsRecord struct {
	// Name of the element the stat record belongs to.
	Element string `json:"element"`
	// Type of the stat record.
	Stat string `json:"stat"`
	// Value of the stat record.
	Value int `json:"value"`
}
type StatsGetResult struct {
	// List of stats records retrieved
	StatsRecords []StatsRecord `json:"statsRecords"`
}
type EventsWriteParams struct {
	Version string `json:"version"`
}
type BgpEvent struct {
	// Reason for the state change.
	Reason string `json:"reason"`
	// BGP peer whose state just changed.
	Peer string `json:"peer"`
	// Old value for the BGP adjacency state for the peer.
	BgpState string `json:"bgpState"`
}
type Event struct {
	Bgp BgpEvent `json:"bgp"`

	Isis IsisEvent `json:"isis"`
}
type IsisEvent struct {
	// ISIS peer whose state just changed.
	Peer string `json:"peer"`
	// Old value for the IS-IS adjacency state for the peer.
	IsisState string `json:"isisState"`
	// IS-IS level for the state change.
	IsisLevel string `json:"isisLevel"`
	// Reason for the state change.
	Reason string `json:"reason"`
}
type EventsWriteResult struct {
	// List of events to write
	Events []Event `json:"events"`
}
type CommandSendParams struct {
	Version string `json:"version"`
	// Command to send
	Cmd string `json:"cmd"`
	// Command's arguments
	Args string `json:"args"`
}
type CommandOutput struct {
	// Command's return code
	ExitCode int `json:"exitCode"`
	// Command's stdout
	Stdout string `json:"stdout"`
	// Command's stderr
	Stderr string `json:"stderr"`
}
